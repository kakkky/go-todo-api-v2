// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
delete from users
where id=$1
`

func (q *Queries) DeleteUser(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser)
	return err
}

const fetchAllUser = `-- name: FetchAllUser :many
select id,email,name
from users
`

type FetchAllUserRow struct {
	ID    string
	Email string
	Name  string
}

func (q *Queries) FetchAllUser(ctx context.Context) ([]FetchAllUserRow, error) {
	rows, err := q.query(ctx, q.fetchAllUserStmt, fetchAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FetchAllUserRow{}
	for rows.Next() {
		var i FetchAllUserRow
		if err := rows.Scan(&i.ID, &i.Email, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmail = `-- name: FindUserByEmail :one
select id,email,name,hashed_password
from users
where email =$1
`

type FindUserByEmailRow struct {
	ID             string
	Email          string
	Name           string
	HashedPassword string
}

func (q *Queries) FindUserByEmail(ctx context.Context) (FindUserByEmailRow, error) {
	row := q.queryRow(ctx, q.findUserByEmailStmt, findUserByEmail)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
insert into users (
    name,
    email
) values (
    $1,
    $2
)
`

func (q *Queries) InsertUser(ctx context.Context) error {
	_, err := q.exec(ctx, q.insertUserStmt, insertUser)
	return err
}

const updateUser = `-- name: UpdateUser :exec
update users
set name=$2,email=$3
where id=$1
`

func (q *Queries) UpdateUser(ctx context.Context) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser)
	return err
}
