basePath: /
definitions:
  health.healthResponse:
    properties:
      health_check:
        type: string
    type: object
  presenter.FailureResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  presenter.SuccessResponse-array_user_GetUsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/user.GetUsersResponse'
        type: array
      status:
        type: integer
    type: object
  presenter.SuccessResponse-health_healthResponse:
    properties:
      data:
        $ref: '#/definitions/health.healthResponse'
      status:
        type: integer
    type: object
  presenter.SuccessResponse-user_PostUserResponse:
    properties:
      data:
        $ref: '#/definitions/user.PostUserResponse'
      status:
        type: integer
    type: object
  presenter.SuccessResponse-user_UpdateUserResponse:
    properties:
      data:
        $ref: '#/definitions/user.UpdateUserResponse'
      status:
        type: integer
    type: object
  user.GetUsersResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  user.PostUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  user.PostUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  user.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - id
    type: object
  user.UpdateUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is TodoARestPI by golang.
  title: TodoRestAPI
  version: "1.0"
paths:
  /health:
    get:
      description: apiのヘルスチェックを行う。ルーティングが正常に登録されているかを確かめる。
      responses:
        "200":
          description: Health check message
          schema:
            $ref: '#/definitions/presenter.SuccessResponse-health_healthResponse'
      summary: apiのヘルスチェックを行う
      tags:
      - HealthCheck
  /user:
    patch:
      consumes:
      - application/json
      description: ユーザー情報（名前・メールアドレス）を更新する
      parameters:
      - description: ユーザー更新のための情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 登録されたユーザーの情報
          schema:
            $ref: '#/definitions/presenter.SuccessResponse-user_UpdateUserResponse'
        "400":
          description: 不正なリクエスト
          schema:
            $ref: '#/definitions/presenter.FailureResponse'
        "500":
          description: 内部サーバーエラー
          schema:
            $ref: '#/definitions/presenter.FailureResponse'
      summary: ユーザーの更新
      tags:
      - User
    post:
      consumes:
      - application/json
      description: 新しいユーザーを登録する
      parameters:
      - description: ユーザー登録のための情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.PostUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 登録されたユーザーの情報
          schema:
            $ref: '#/definitions/presenter.SuccessResponse-user_PostUserResponse'
        "400":
          description: 不正なリクエスト
          schema:
            $ref: '#/definitions/presenter.FailureResponse'
        "500":
          description: 内部サーバーエラー
          schema:
            $ref: '#/definitions/presenter.FailureResponse'
      summary: ユーザーの登録
      tags:
      - User
  /user/{id}:
    delete:
      description: ユーザーを退会させ、ユーザー情報を削除する
      parameters:
      - description: 削除するユーザーのid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: 不正なリクエスト
          schema:
            $ref: '#/definitions/presenter.FailureResponse'
        "500":
          description: 内部サーバーエラー
          schema:
            $ref: '#/definitions/presenter.FailureResponse'
      summary: ユーザーの退会
      tags:
      - User
  /users:
    get:
      description: 全てのユーザーのID・名前をリストで取得する
      produces:
      - application/json
      responses:
        "200":
          description: 登録されたユーザーの情報
          schema:
            $ref: '#/definitions/presenter.SuccessResponse-array_user_GetUsersResponse'
        "400":
          description: 不正なリクエスト
          schema:
            $ref: '#/definitions/presenter.FailureResponse'
        "500":
          description: 内部サーバーエラー
          schema:
            $ref: '#/definitions/presenter.FailureResponse'
      summary: 全ユーザーを取得する
      tags:
      - User
swagger: "2.0"
